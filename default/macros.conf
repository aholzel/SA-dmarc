[dmarc_log]
definition = index=dmarc (sourcetype=dmarc OR sourcetype=dmarc:json) 
iseval = 0

[external_dns_log]
definition = index=network sourcetype=named
iseval = 0

[dmarc_domains]
args = table_fields
definition = inputlookup dmarc_email_domains where domain!="*acmetech.com" \
| inputlookup cim_corporate_email_domain_lookup append=1 where domain!="*acmetech.com" \
| stats values(spf_lookup_script) AS spf_lookup_script by domain\
| fillnull value=false spf_lookup_script\
| table $table_fields$
iseval = 0

[spf_dkim_dmarc_checks]
definition = spf_dmarc=case(\
  (spf_domain_1 == "not_set"),spf_domain_1,((published_dmarc_aspf == "r") AND (((trim(header_from) == trim(spf_domain_1)) OR like(spf_domain_1,("%" . header_from))) OR ((trim(header_from) == trim(spf_domain_2)) OR like(spf_domain_2,("%" . header_from))))),"aligned",\
  ((published_dmarc_aspf == "s") AND ((trim(header_from) == trim(spf_domain_1)) OR (trim(header_from) == trim(spf_domain_2)))),"aligned",\
  true(),"unaligned"), \
spf_policy=if((((spf_result_1 == "pass") OR (spf_result_2 == "pass")) AND (spf_dmarc == "aligned")),"pass","no_pass"), \
  \
dkim_dmarc=case(\
  (dkim_domain_1 == "not_set"),dkim_domain_1,\
  ((published_dmarc_adkim == "r") AND (((trim(header_from) == trim(dkim_domain_1)) OR like(dkim_domain_1,("%" . header_from))) OR ((trim(header_from) == trim(dkim_domain_2)) OR like(dkim_domain_2,("%" . header_from))))),"aligned",\
  ((published_dmarc_adkim == "s") AND ((trim(header_from) == trim(dkim_domain_1)) OR (trim(header_from) == trim(dkim_domain_2)))),"aligned",\
  true(),"unaligned"), \
dkim_policy=if((((dkim_result_1 == "pass") OR (dkim_result_2 == "pass")) AND (dkim_dmarc == "aligned")),"pass","no_pass"), \
\
dmarc_correct=case(\
  (((dkim_policy == "pass") OR (spf_policy == "pass")) AND (evaluated_disposition == "none")),"Yes", \
  (((dkim_policy == "no_pass") AND (spf_policy == "no_pass")) AND (evaluated_disposition == published_dmarc_policy OR evaluated_disposition == published_p)),"Yes",\
  (((dkim_policy == "pass") OR (spf_policy == "pass")) AND (evaluated_disposition != "none")),"No (deliver)",\
  (((dkim_policy == "no_pass") AND (spf_policy == "no_pass")) AND (evaluated_disposition != published_dmarc_policy OR evaluated_disposition != published_p)),"No (".published_dmarc_policy.")",\
  true(),"No"),\
dmarc_correct=if(dmarc_correct == "No (none)", "No (deliver)", dmarc_correct)
iseval = 0

[ipv6_expanded(1)]
definition = eval ipv6_expanded=$ipv6_ip$, ip_split=split(ipv6_expanded,""),\
  ipv6_expanded=case( \
mvcount(mvfilter(match(ip_split,":")))==2,replace(ipv6_expanded,"::",":0000:0000:0000:0000:0000:0000:"),  mvcount(mvfilter(match(ip_split,":")))==3,replace(ipv6_expanded,"::",":0000:0000:0000:0000:0000:"),  mvcount(mvfilter(match(ip_split,":")))==4,replace(ipv6_expanded,"::",":0000:0000:0000:0000:"), \
  mvcount(mvfilter(match(ip_split,":")))==5,replace(ipv6_expanded,"::",":0000:0000:0000:"), \
  mvcount(mvfilter(match(ip_split,":")))==6,replace(ipv6_expanded,"::",":0000:0000:"), \
  mvcount(mvfilter(match(ip_split,":")))==7,replace(ipv6_expanded,"::",":0000:"), \
  true(),ipv6_expanded), \
  ip_p1=replace(ipv6_expanded,"([^\:]+)\:(.+)","\1"), temp_ip=replace(ipv6_expanded,"([^\:]+\:)(.*)","\2"), \
  ip_p2=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p3=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p4=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p5=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p6=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p7=replace(temp_ip,"([^\:]+)\:(.+)","\1"), temp_ip=replace(temp_ip,"([^\:]+\:)(.*)","\2"), \
  ip_p8=replace(temp_ip,"([^\:]+)\:(.+)","\1") \
| foreach ip_p* [ | eval <<FIELD>>=case(len(<<FIELD>>)==1,"000".<<FIELD>>, len(<<FIELD>>)==2,"00".<<FIELD>>, len(<<FIELD>>)==3,"0".<<FIELD>>, true(), <<FIELD>>) ] \
| eval ipv6_expanded=ip_p1.":".ip_p2.":".ip_p3.":".ip_p4.":".ip_p5.":".ip_p6.":".ip_p7.":".ip_p8 \
| fields - ip_p1 ip_p2 ip_p3 ip_p4 ip_p5 ip_p6 ip_p7 ip_p8 ip_split temp_ip
args = ipv6_ip
iseval = 0

[ipv6_dotnotation(1)]
definition = `ipv6_expanded($ipv6_ip$)` \
| eval ipv6_dotnotation=replace(mvjoin(split(ipv6_expanded, ""),"."),"\:\.","") \
| fields - ipv6_expanded
args = ipv6_ip
iseval = 0
